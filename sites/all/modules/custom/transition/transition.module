<?php
// $Id:

/**
 * @file
 * transistion belsize helper module
 */

/**
 * Implementatation of hook_menu().
 */
function transition_menu() {
  
  // og gallery (filter)
  $items['node/%node/og/galleries'] = array(
    'title' => 'Photos',
    'page callback' => 'galleries_page',
    'page arguments' => array(1),
    'access callback' => '_access_galleries',
   	'access arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 3
  );
  
  // og events (filter)
  $items['node/%node/og/events'] = array(
    'title' => 'Events',
    'page callback' => 'events_page',
    'page arguments' => array(1),
    'access callback' => '_access_galleries',
   	'access arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 3	
  );

  // og news (filter)
  $items['node/%node/og/news'] = array(
    'title' => 'News',
    'page callback' => 'news_page',
    'page arguments' => array(1),
    'access callback' => '_access_galleries',
   	'access arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 3
  );

  return $items;
}

function galleries_page($ognode) {
	return general_page($ognode, 'gallery');
}

function events_page($ognode) {
	return general_page($ognode, 'event');	
}

function news_page($ognode) {
	return general_page($ognode, 'news');	
}

function general_page($ognode, $type) {
	$sql = "SELECT * FROM {og_ancestry} WHERE group_nid = %d";
	$result = db_query($sql, $ognode->nid);
	$no_results = TRUE;
	while ($data = db_fetch_object($result)) {
	  $node = node_load($data->nid);
	  if($node->type == $type) {
	  	$results .= node_view($node, TRUE, FALSE); 
	  	if($no_results) {
	  		$no_results = FALSE;
	  	}
	  }
	}
	
	return $no_results ? 'This group doesn\'t have any '. $type . ' content.' : $results;
}

function _access_galleries($node) {
	if($node->type == 'group') {
		return TRUE;		
	}	else {
		return FALSE;		
	}	
}


/**
 * Implementation of hook_nodeapi().
 *
 */
function transition_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    // Now we need to take care of loading one of the extended nodes from the
    // database. An array containing our extra field needs to be returned.
    case 'load':
//    	if($node->type == 'event') {
//      	return array('transition_field' => 'extra information transistion');    		
//    	}
      break;

    // Insert is called after the node has been validated and saved to the
    // database. It gives us a chance to create our own record in the database.
    case 'insert':
      break;

    // Update is called when an existing node has been changed. Here, we use a
    // DELETE then an INSERT rather than an UPDATE. The reason is that a node
    // created before this module was installed won't already have a rating
    // saved so there would be nothing to update.
    case 'update':
      break;

    // Delete is called whn the node is being deleted, it gives us a chance
    // to delete the rating too.
    case 'delete':
      break;

    case 'view':
      break;
  }
}

/**
 * Implementation of hook_init()
 */
function transition_init() {
  $delay = 600;
  if(variable_get('nice_menus_sf_delay', 800) > $delay) {
    variable_set('nice_menus_sf_delay', $delay);
  }
}

function transition_preprocess_og_mission(&$variables) {
	if($variables['form']['#node']->type == 'group') {
		if($variables['form']['#node']->field_image[0]['filepath']) {
			$path = $variables['form']['#node']->field_image[0]['filepath'];
			$image = theme('imagecache', 'event_thumb', $path, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE);
			$variables['image'] = $image;			
		}
		$m = user_load($variables['form']['#node']->uid);
		$variables['manager'] = l($m->name, 'user/'.$m->uid);
    $variables['members'] = _get_og_mission_members_count($variables['form']['#node']->nid);
	  $variables['mission'] = $variables['form']['#value'];		
	}
}

function _get_og_mission_members_count($og_nid) {
	$sql = "SELECT 
(
SELECT COUNT(*)
FROM og_uid ou
INNER JOIN users u ON ou.uid = u.uid
WHERE ou.nid = og.nid AND u.status > 0 AND ou.is_active >= 1 AND ou.is_admin >= 0
)
AS member_count
FROM {node} {node}
LEFT JOIN og og ON node.nid = og.nid
WHERE (node.status <> 0) AND (node.type IN ('group')) AND (og.og_directory <> 0) AND (node.nid = %d)";
  $member_count = db_result(db_query($sql, $og_nid));

	return isset($member_count) ? $member_count : '?';
}

/**
 * template_preprocess_user_picture overwrite
 * 
 * @return html
 *   themed user picture
 */
function transition_preprocess_user_picture(&$variables) {
  $variables['picture'] = '';
  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    if (!empty($account->picture) && file_exists($account->picture)) {
      $picture = $account->picture;
    }
    else if (variable_get('user_picture_default', '')) {
      $picture = variable_get('user_picture_default', '');
    } else {
    	$picture = drupal_get_path('theme', 'tb'). '/images/default-profile.png';
    }

    if (isset($picture)) {
      $alt = t("@user's picture", array('@user' => $account->name ? $account->name : variable_get('anonymous', t('Anonymous'))));
      $presetname = 'user_picture';
      $path = $picture;
      $variables['picture'] = theme('imagecache', $presetname, $path, $alt = '', $title = '', $attributes = NULL);
      if (!empty($account->uid) && user_access('access user profiles')) {
        $attributes = array(
          'attributes' => array('title' => t('View user profile.')),
          'html' => TRUE,
        );
        $variables['picture'] = l($variables['picture'], "user/$account->uid", $attributes);
      }
    }
  }
}

function transition_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'simplenews_block_form_1') {
    $form['submit']['#value'] = 'Subscribe';
    $form['mail']['#size'] = 16;
    unset($form['mail']['#title']);
    unset($form['action']);
    $form['action']['#type'] = 'value';
    $form['action']['#value'] = 'subscribe';
  }
}



